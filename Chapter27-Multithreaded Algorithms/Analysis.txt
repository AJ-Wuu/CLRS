States:                                                        1.New
1. new                                                   start() ↓
2. reunnable                                                2.Runnable   ↖ sleep() done, I/O complete, lock available, resume(), notify()
3. running                                                       ↓          4.Blocked (Non-Runnable)
4. waiting / blocked / sleeping                              3.Running   ↗ sleep(), block on I/O, wait for lock, suspend(), wait()
5. dead                             run() method exits or stop() ↓
                                                            5.Terminated

Master-Method Cheat Sheet:
Solve T(n) = a * T(n/b) + f(n), where a >= 1 and b > 1
Case1: f(n) = O(n^(logb(a) - ε)), constant ε > 0 => T(n) = Θ(n^logb(a))
       Eg. T(n) = 4 * T(n/2) + n
           n^logb(a) = n^2 >> n => T(n) = Θ(n^2)
Case2: f(n) = Θ(n^logb(a) * (lgn)^k), constant k >= 0 => T(n) = Θ(n^logb(a) * (lgn)^(k+1))
       Eg. T(n) = 4 * T(n/2) + n^2
           n^logb(a) = n^2 = n^2 * (lgn)^0 => T(n) = Θ(n^2 * lgn)
Case3: f(n) = Ω(n^(logb(a) + ε)), constant ε > 0 and regularity condition => T(n) = Θ(f(n))
       Eg. T(n) = 4 * T(n/2) + n^3
           n^logb(a) = n^2 << n^3 => T(n) = Θ(n^3)
Additional Case:
       Eg. T(n) = 4 * T(n/2) + n^2 / lgn => T(n) = Θ(n^2 * lg(lgn)) (Could be proved by substitution)
           For this example, (lgn)^k -> k = -1 => NOT Case2; the ratio is lgn, which is smaller than any n^ε => NOT Case1

There is an Akra-Bazzi Method (more complicated and more general) for this kind of recurrence

Bit Trick: ((n & (-n)) == n) asserts that n is a power of 2

Performance Tips:
1. Minimize the span to maximize parallelism. Try to generate 10 times more parallelism than processors for near-perfect linear speedup.
2. If you have plenty of parallelism, try to trade some of it off to reduce work overhead.
3. Use divide-and-conquer recursion or parallel loops rather than spawning one small thing after another.
   Eg. DO: cilk_for (int i=0; i<n; i++) {
               foo(i);
           }
       NOT: for (int i=0; i<n; i++) {
                cilk_spawn foo(i);
            }
4. Ensure that work/#spawns is sufficiently large. Coarsen by using function calls and inlining near the leaves of recursion, rather than spawning.
5. Parallelize outer loops, as opposed to inner loops, if you're forced to make a choice.
6. Watch out for scheduling overheads.
   Eg. DO: cilk_for (int i=0; i<2; i++) {
               for (int j=0; j<n; j++) {
                   f(i, j);
               }
           }
       NOT: for (int j=0; j<n; j++) {
                cilk_for (int i=0; i<2; i++) {
                    f(i, j);
                }
            }
